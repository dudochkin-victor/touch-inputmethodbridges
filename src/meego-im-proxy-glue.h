/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_duiinputmethodserver1
#define DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_duiinputmethodserver1

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_show_input_method (DBusGProxy *proxy, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "showInputMethod", G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_show_input_method_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_show_input_method_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_show_input_method_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_show_input_method_async (DBusGProxy *proxy, org_maemo_duiinputmethodserver1_show_input_method_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "showInputMethod", org_maemo_duiinputmethodserver1_show_input_method_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_hide_input_method (DBusGProxy *proxy, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "hideInputMethod", G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_hide_input_method_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_hide_input_method_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_hide_input_method_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_hide_input_method_async (DBusGProxy *proxy, org_maemo_duiinputmethodserver1_hide_input_method_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "hideInputMethod", org_maemo_duiinputmethodserver1_hide_input_method_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit (DBusGProxy *proxy, const GValueArray* IN_pos, const GValueArray* IN_preeditRect, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "mouseClickedOnPreedit", dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_INT, G_TYPE_INVALID), IN_pos, dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INVALID), IN_preeditRect, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_async (DBusGProxy *proxy, const GValueArray* IN_pos, const GValueArray* IN_preeditRect, org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "mouseClickedOnPreedit", org_maemo_duiinputmethodserver1_mouse_clicked_on_preedit_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_INT, G_TYPE_INVALID), IN_pos, dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INVALID), IN_preeditRect, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_set_preedit (DBusGProxy *proxy, const char * IN_text, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "setPreedit", G_TYPE_STRING, IN_text, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_set_preedit_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_set_preedit_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_set_preedit_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_set_preedit_async (DBusGProxy *proxy, const char * IN_text, org_maemo_duiinputmethodserver1_set_preedit_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setPreedit", org_maemo_duiinputmethodserver1_set_preedit_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_text, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_update_widget_information (DBusGProxy *proxy, const GHashTable* IN_stateInformation, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "updateWidgetInformation", dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_stateInformation, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_update_widget_information_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_update_widget_information_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_update_widget_information_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_update_widget_information_async (DBusGProxy *proxy, const GHashTable* IN_stateInformation, org_maemo_duiinputmethodserver1_update_widget_information_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "updateWidgetInformation", org_maemo_duiinputmethodserver1_update_widget_information_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_stateInformation, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_reset (DBusGProxy *proxy, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "reset", G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_reset_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_reset_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_reset_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_reset_async (DBusGProxy *proxy, org_maemo_duiinputmethodserver1_reset_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "reset", org_maemo_duiinputmethodserver1_reset_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_set_context_object (DBusGProxy *proxy, const char * IN_callbackObject, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "setContextObject", G_TYPE_STRING, IN_callbackObject, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_set_context_object_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_set_context_object_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_set_context_object_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_set_context_object_async (DBusGProxy *proxy, const char * IN_callbackObject, org_maemo_duiinputmethodserver1_set_context_object_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setContextObject", org_maemo_duiinputmethodserver1_set_context_object_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_callbackObject, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_activate_context (DBusGProxy *proxy, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "activateContext", G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_activate_context_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_activate_context_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_activate_context_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_activate_context_async (DBusGProxy *proxy, org_maemo_duiinputmethodserver1_activate_context_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "activateContext", org_maemo_duiinputmethodserver1_activate_context_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_app_orientation_changed (DBusGProxy *proxy, const gint IN_angle, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "appOrientationChanged", G_TYPE_INT, IN_angle, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_app_orientation_changed_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_app_orientation_changed_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_app_orientation_changed_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_app_orientation_changed_async (DBusGProxy *proxy, const gint IN_angle, org_maemo_duiinputmethodserver1_app_orientation_changed_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "appOrientationChanged", org_maemo_duiinputmethodserver1_app_orientation_changed_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_angle, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_set_copy_paste_state (DBusGProxy *proxy, const gboolean IN_copyAvailable, const gboolean IN_pasteAvailable, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "setCopyPasteState", G_TYPE_BOOLEAN, IN_copyAvailable, G_TYPE_BOOLEAN, IN_pasteAvailable, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_set_copy_paste_state_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_set_copy_paste_state_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_set_copy_paste_state_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_set_copy_paste_state_async (DBusGProxy *proxy, const gboolean IN_copyAvailable, const gboolean IN_pasteAvailable, org_maemo_duiinputmethodserver1_set_copy_paste_state_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setCopyPasteState", org_maemo_duiinputmethodserver1_set_copy_paste_state_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_copyAvailable, G_TYPE_BOOLEAN, IN_pasteAvailable, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_duiinputmethodserver1_process_key_event (DBusGProxy *proxy, const gint IN_keyType, const gint IN_keyCode, const gint IN_modifiers, const char * IN_text, const gboolean IN_autoRepeat, const gint IN_count, const gint IN_nativeScanCode, const gint IN_nativeModifiers, GError **error)

{
  dbus_g_proxy_call_no_reply (proxy, "processKeyEvent", G_TYPE_INT, IN_keyType, G_TYPE_INT, IN_keyCode, G_TYPE_INT, IN_modifiers, G_TYPE_STRING, IN_text, G_TYPE_BOOLEAN, IN_autoRepeat, G_TYPE_INT, IN_count, G_TYPE_INT, IN_nativeScanCode, G_TYPE_INT, IN_nativeModifiers, G_TYPE_INVALID, G_TYPE_INVALID);
  return TRUE;
}

typedef void (*org_maemo_duiinputmethodserver1_process_key_event_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_duiinputmethodserver1_process_key_event_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_duiinputmethodserver1_process_key_event_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_duiinputmethodserver1_process_key_event_async (DBusGProxy *proxy, const gint IN_keyType, const gint IN_keyCode, const gint IN_modifiers, const char * IN_text, const gboolean IN_autoRepeat, const gint IN_count, const gint IN_nativeScanCode, const gint IN_nativeModifiers, org_maemo_duiinputmethodserver1_process_key_event_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "processKeyEvent", org_maemo_duiinputmethodserver1_process_key_event_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_keyType, G_TYPE_INT, IN_keyCode, G_TYPE_INT, IN_modifiers, G_TYPE_STRING, IN_text, G_TYPE_BOOLEAN, IN_autoRepeat, G_TYPE_INT, IN_count, G_TYPE_INT, IN_nativeScanCode, G_TYPE_INT, IN_nativeModifiers, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_duiinputmethodserver1 */

G_END_DECLS
